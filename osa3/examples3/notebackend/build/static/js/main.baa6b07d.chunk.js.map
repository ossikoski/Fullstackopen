{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","axios","get","then","response","data","newObject","post","id","put","Notification","message","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","console","log","length","notesToShow","filter","map","i","key","find","n","changedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"yNAeeA,EAbF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UACf,qBACA,iBAEJ,OACE,wBAAIC,UAAU,QACXJ,EAAKK,QACN,4BAAQC,QAASL,GAAmBC,K,gBCTpCK,EAAU,6CAiBD,EAfA,WAEX,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa9B,EAVA,SAAAC,GAEX,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ9B,EALA,SAACG,EAAIF,GAEhB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCD9BK,EAZM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OAAgB,OAAZA,EACK,KAIP,yBAAKd,UAAU,SACZc,ICyHMC,EA7HH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAIcJ,oBAAS,GAJvB,mBAITK,EAJS,KAIAC,EAJA,OAKwBN,mBAAS,MALjC,mBAKTO,EALS,KAKKC,EALL,KAOhBC,qBAAU,WAYRC,IAEKpB,MAAK,SAAAqB,GACJT,EAASS,QAEd,IACHC,QAAQC,IAAI,SAAUZ,EAAMa,OAAQ,SAEpC,IAkEMC,EAAcV,EAChBJ,EACAA,EAAMe,QAAO,SAAApC,GAAI,OAAIA,EAAKG,aAE9B,OACE,6BACE,qCACA,kBAAC,EAAD,CAAce,QAASS,IACvB,6BACE,4BAAQrB,QAAS,kBAAMoB,GAAYD,KAAnC,QACQA,EAAU,YAAc,QAGlC,4BACGU,EAAYE,KAAI,SAACrC,EAAMsC,GAAP,OACf,kBAAC,EAAD,CAAMC,IAAKD,EACXtC,KAAMA,EACNC,iBAAkB,kBAnFC,SAAAc,GAEzB,IAAMf,EAAOqB,EAAMmB,MAAK,SAAAC,GAAC,OAAIA,EAAE1B,KAAOA,KAChC2B,EAAW,eAAQ1C,EAAR,CAAcG,WAAYH,EAAKG,YAUhD2B,EACQf,EAAI2B,GACThC,MAAK,SAAAC,GACJW,EAASD,EAAMgB,KAAI,SAAArC,GAAI,OAAIA,EAAKe,KAAOA,EAAKf,EAAOW,EAASC,YAE/D+B,OAAM,SAAAC,GACLhB,EAAgB,SAAD,OACJ5B,EAAKK,QADD,sCAGfwC,YAAW,WACTjB,EAAgB,QACf,KACHN,EAASD,EAAMe,QAAO,SAAAK,GAAC,OAAIA,EAAE1B,KAAOA,SA0DR+B,CAAmB9C,EAAKe,WAIpD,0BAAMgC,SAzDM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjB7C,QAASkB,EACT4B,MAAM,IAAIC,MAAOC,cACjBlD,UAAWmD,KAAKC,OAAS,IAiB3BzB,EACQoB,GACLxC,MAAK,SAAAC,GACJW,EAASD,EAAMmC,OAAO7C,EAASC,OAC/BY,EAAW,SAgCX,2BACEiC,MAAOlC,EACPmC,SA7BiB,SAACV,GACxBhB,QAAQC,IAAIe,EAAMW,OAAOF,OACzBjC,EAAWwB,EAAMW,OAAOF,UA6BpB,4BAAQG,KAAK,UAAb,W,MCvHRC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.baa6b07d.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n  const label = note.important\r\n    ? 'make not important' \r\n    : 'make important'\r\n\r\n  return (\r\n    <li className='note'>\r\n      {note.content} \r\n      <button onClick={toggleImportance}>{label}</button>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default Note","import axios from 'axios'\r\nconst baseUrl = 'https://aqueous-bayou-80016.herokuapp.com/'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update }","import React from 'react'\r\n\r\nconst Notification = ({ message }) => {\r\n    if (message === null) {\r\n      return null\r\n    }\r\n  \r\n    return (\r\n      <div className=\"error\">\r\n        {message}\r\n      </div>\r\n    )\r\n  }\r\n\r\nexport default Notification","import React, { useState, useEffect } from 'react'\r\nimport Note from './components/Note'\r\nimport noteService from './services/notes'\r\nimport Notification from './components/Notification'\r\n\r\nconst App = () => {\r\n  const [notes, setNotes] = useState([])            // Tämä tila vaihtuu kun klikataan sublit, tätä käsittelee addNote\r\n  const [newNote, setNewNote] = useState('')        // Tämä tila vaihtuu aina kun lomakkeeseen kirjoitetaan ja tätä käsittelee handleNoteState = \"Tila heijastaa syötekentän arvoa\"\r\n  // \"placeholder\"-teksti (nyt tyhjä) ilmestyy aluksi syötekomponenttiin.\r\n  const [showAll, setShowAll] = useState(true)\r\n  const [errorMessage, setErrorMessage] = useState(null)\r\n\r\n  useEffect(() => {\r\n    /*\r\n    console.log('effect')\r\n    axios\r\n      .get('http://localhost:3001/notes')\r\n      .then(response => {\r\n        console.log('promise fulfilled')\r\n        setNotes(response.data)\r\n      })\r\n    */\r\n    // axios.get on korvattu noteService.getAllilla\r\n\r\n    noteService   \r\n      .getAll()\r\n        .then(initialNotes => {\r\n          setNotes(initialNotes)\r\n        })\r\n  }, [])\r\n  console.log('render', notes.length, 'notes')\r\n  \r\n  const toggleImportanceOf = id => {\r\n    //const url = `http://localhost:3001/notes/${id}` // Jokaisella muistiinpanolla id-kenttään perustuva url\r\n    const note = notes.find(n => n.id === id)       // Etsitään muutettava muistiinpano ja talletetaan muuttujaan note viite siihen\r\n    const changedNote = { ...note, important: !note.important }  // Luodaan uusi olio, jonka sisältö on sama muuten, mutta important kenttä on päinvastainen\r\n    // Tärkeää luoda uusi olio, joka on kopio vanhasta notesta, koska notes on tila ja tilaa ei saa muuttaa suoraan.\r\n  \r\n    /* axios.put korvattu noteService.updatella\r\n    axios.put(url, changedNote).then(response => {  // PUT-pyyntö, jolla lähetetään olio palvelimelle ja korvataan vanha.\r\n      setNotes(notes.map(note => note.id !== id ? note : response.data)) // Kaikki vanhat muistiinpanot asetetaan notes-muuttujaan, paitsi muutettu, joka on sama kuin palvelimelle lähetetty\r\n    })    // tulos = ehto ? tulos1 : tulos2 , jos ehto tosi niin tulos = tulos1\r\n          // Eli tässä: Jos kyseessä ei lisätty note, lisätään vanha note. Jos kyseessä on juuri lisätty note, listätään response.data\r\n    */    //^kommentti pätee alemmas\r\n\r\n    noteService\r\n    .update(id, changedNote)\r\n      .then(response => {\r\n        setNotes(notes.map(note => note.id !== id ? note : response.data))\r\n    })\r\n    .catch(error => {\r\n      setErrorMessage(\r\n        `Note '${note.content}' was already removed from server`\r\n      )\r\n      setTimeout(() => {  // Viiden sekunnin kuluttua errorMessage nulliksi\r\n        setErrorMessage(null)\r\n      }, 5000)\r\n      setNotes(notes.filter(n => n.id !== id))\r\n    })\r\n  }\r\n  \r\n\r\n  const addNote = (event) => {         // Event handler form elementille jota kutsutaan kun klikataan submit\r\n    event.preventDefault()             // Prevents submitting a form -> ei päivitä sivua\r\n    const noteObject = {               // Uutta muistiinpanoa vastaava olio\r\n      content: newNote,                // Sisältö syötekentän tilasta\r\n      date: new Date().toISOString(),\r\n      important: Math.random > 0.5,    // 50% todennäköisyydellä muistiinpano on tärkeä :D\r\n      // id: notes.lenght + 1             // id generoidaan määrän perusteella -> Toimii koska muistiinpanoja ei voi poistaa\r\n      // id kommentoitu pois -> parempi antaa palvelimen generoida id\r\n    }\r\n\r\n    /* axios.post korvattu noteService.creatella\r\n    axios // uuden noten lisääminen POST metodilla\r\n      .post('http://localhost:3001/notes', noteObject)\r\n      .then(response => {\r\n        setNotes(notes.concat(response.data))\r\n        setNewNote('')\r\n      })\r\n    */\r\n    //setNotes(notes.concat(noteObject))    // Tilan muuttaminen!\r\n    //setNewNote('')                        // Muuttaa myös syötekentän tilan tyhjäksi\r\n    //Kommentoitu pois nyt kun axios.post lisää noten\r\n\r\n    noteService\r\n    .create(noteObject)\r\n      .then(response => {\r\n        setNotes(notes.concat(response.data))\r\n        setNewNote('')\r\n    })\r\n\r\n  }\r\n\r\n  const handleNoteChange = (event) => {   // Ei tarvitse preventDefaultia, koska syötekentän muutoksella ei oletusarvoista toimintaa, \r\n    console.log(event.target.value)       //toisin kuin lomakkeen lähettämisellä\r\n    setNewNote(event.target.value)\r\n  }\r\n\r\n  const notesToShow = showAll             // Ehdollinen operaattori: Jos showAll = true, näytetään notes kokonaan, jos false niin filtteröitynä\r\n    ? notes\r\n    : notes.filter(note => note.important)\r\n\r\n  return (\r\n    <div>\r\n      <h1>Notes</h1>\r\n      <Notification message={errorMessage} />\r\n      <div>\r\n        <button onClick={() => setShowAll(!showAll)}>\r\n          show {showAll ? 'important' : 'all'}\r\n        </button>\r\n      </div>\r\n      <ul>\r\n        {notesToShow.map((note, i) => \r\n          <Note key={i} \r\n          note={note} \r\n          toggleImportance={() => toggleImportanceOf(note.id)}\r\n          />\r\n        )}\r\n      </ul>\r\n      <form onSubmit={addNote}>\r\n        <input \r\n          value={newNote} \r\n          onChange={handleNoteChange}\r\n        />\r\n        <button type=\"submit\">save</button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}